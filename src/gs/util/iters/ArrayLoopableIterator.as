package gs.util.iters{		/**	 * The ArrayLoopableIterator class provides a non-destructive,	 * pointer-based, looping bi-directional array iterator.	 * 	 * <script src="http://mint.codeendeavor.com/?js" type="text/javascript"></script>	 */	final public class ArrayLoopableIterator extends ArrayBidirectionalIterator	{		/**		 * Constructor for ArrayLoopableIterator instances.		 * 		 * @param array The array to iterate over.		 */		public function ArrayLoopableIterator(array:Array)		{			super(array);		}		/**		 * Returns the previous object, and will go to the end		 * once the pointer get's to the beginning.		 */		override public function previous():Object		{			if(super.hasPrevious()) return super.previous();			else 			{				_pointer=_array.length - 1;				return _array[_pointer];			}		}		/**		 * Returns the next object, and will start		 * over when reached the end.		 */		override public function next():Object 		{			if(super.hasNext())return super.next();			else 			{				super.reset();				return super.next();			}		}				/**		 * This will always have a previous element, because the pointer loop.		 */		override public function hasPrevious():Boolean 		{			return true;		}			/**		 * This will always have a next element, because the pointer loops.		 */		override public function hasNext():Boolean 		{			return true;		}			/**		 * Return a <code>glimple</code> of the previous element without 		 * updating the pointer.		 */		override public function glimpse():Object 		{			if(super.hasPrevious()) return super.glimpse();			else return _array[_array.length - 1];		}		/**		 * Return a <code>peek</code> of the next element without 		 * updating the pointer.		 */		override public function peek():Object 		{			if(super.hasNext()) return super.peek();			else return _array[0];		}		/**		 * Return <code>true</code> if pointer is at the begining of the collection.		 */		public function isAtStart():Boolean 		{			return (_pointer==0);		}		/**		 * Return <code>true</code> if pointer is at the end of the collection.		 */		public function isAtEnd():Boolean 		{			return (_pointer==_array.length - 1);		}	}}