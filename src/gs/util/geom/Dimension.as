package gs.util.geom{	/**	 * The Dimension class stores width and height dimensions and provides	 * various methods of manipulations.	 * 	 * <script src="http://mint.codeendeavor.com/?js" type="text/javascript"></script>	 */	public class Dimension 	{		/**		 * The width.		 */		public var width:int;				/**		 * The height.		 */		public var height:int;				/**		 * Constructor for Dimension instances.		 * 		 * @param w The width		 * @param h The height		 */		public function Dimension(w:int=0,h:int=0) 		{			width=w;			height=h;		}		/**		 * Returns <code>true</code> if the passed Dimension fits within the 		 * bounds of this Dimension. A Dimension of the same size is 		 * considered to "fit".		 * 		 * @param d The dimension being tested		 */		public function contains(d:Dimension):Boolean 		{			return width >= d.width && height >= d.height;		}		/**		 * Returns <code>true</code> if this Dimension properly contains the one		 * specified - proper containment is defined as containment using 		 * "<", instead of "<=".		 * 		 * @param d The demension being tested.		 */		public function containsProper(d:Dimension):Boolean 		{			return width > d.width && height > d.height;		}		/**		 * This Dimension is intersected with the one specified. intersection is		 * performed by taking the min of the values from each dimension.		 * 		 * @param d The Dimension to intersect with this Dimension.		 */		public function intersect(d:Dimension):Dimension 		{			width=Math.min(d.width,width);			height=Math.min(d.height,height);			return this;		}		/**		 * Sets the width and height of this Dimension to to the max() value		 * between this Dimension and the target Dimension.		 * 		 * @param d The Dimension to union with this Dimension.		 */		public function union(d:Dimension):Dimension 		{			width=Math.max(width,d.width);			height=Math.max(height,d.height);			return this;		}		/**		 * Returns the area of this Dimension.		 */		public function getArea():Number 		{			return width * height;		}		/**		 * Returns <code>true</code> if the Dimension has width or 		 * height greater than 0.		 */		public function isEmpty():Boolean 		{			return (width == 0) || (height == 0);		}		/**		 * Creates and returns a copy of this Dimension.		 */		public function clone():Dimension 		{			return new Dimension(width,height);		}		/**		 * Test equality between this Dimension and another Dimension.		 * 		 * @param d The Dimension being tested for equality		 */		public function equals(d:Dimension):Boolean 		{			if(d == null) return false;			return (d.width == width && d.height == height);		}		/**		 * Expands the size of this Dimension by the specified width and height.		 * 		 * @param w  The amount the width will be increased by.		 * @param h  The amount the height will be increased by.		 */		public function expand(w:Number=0, h:Number=0):Dimension 		{               			width += w;			height += h;			return this;		}		/**		 * Scales the width of this Dimension by <i>w</i> and scales the		 * height of this Dimension by <i>h</i>.		 *		 * @param w The amount the width will be scaled.		 * @param h The amount the height will be scaled.		 */		public function scale(w:Number=0,h:Number=0):Dimension 		{			width=Number(width * w);			height=Number(height * h);			return this;		}		/**		 * Reduces the width and height of this Dimension.		 *		 * @param w The amount to reduce the width by.		 * @param h The amount to reduce the height by.		 */		public function shrink(w:Number=0, h:Number=0):Dimension 		{               			width=width - w;			height=height - h;			return this;		}		/**		 * Friendly description and for debug info.		 */		public function toString():String 		{			return "[Dimension width=" + width + ", height=" + height + "]";		}	}}