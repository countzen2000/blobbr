package gs.util.geom{	import gs.util.MathUtils;	import gs.util.geom.Point;	/**	 * The Point3D class plots x,y,and z in 3D space.	 * 	 * <script src="http://mint.codeendeavor.com/?js" type="text/javascript"></script>	 */	public class Point3D extends Point	{				/**		 * The z index.		 */		public var z:Number;		/**		 * Constructor for Point3D instances.		 * 		 * @param x (Number)		 * @param y (Number)		 * @param z (Number)		 */		public function Point3D(x:Number=0,y:Number=0,z:Number=0)		{			super(x,y);			this.z=z;		}		/**		 * Check if two Point3D instances are equal.		 * 		 * @param p The Point3D to test against.		 */		public function isEqual3D(p:Point3D):Boolean		{			return (p.x==x&&p.y==y&&p.z==z);		}		/**		 * Get Z distance between two points.		 * 		 * @param p The Point3D to test against.		 */		public function getZDistance(p:Point3D):Number		{			return MathUtils.getZDistance(this,p);		}		/**		 * Returns a new 3D point based on this point with x and y offset values.		 * 		 * @param x The amount to displace x by.		 * @param y The amount to displace y by.		 * @param z The amount to displaze z by.		 */		public function displace3D(x:Number,y:Number,z:Number):Point3D		{			return new Point3D(this.x+x,this.y+y,this.z+z);		}		/**		 * Offset the Point3D object by the specified amounts.		 * 		 * @param x The amount to offset x by.		 * @param y The amount to offset y by.		 * @param z The amount to offset z by.		 */		public function offset3D(x:Number,y:Number,z:Number):void		{			super.offset(x,y);			this.z += z;		}			/**		 * Clone this Point3D.		 */		public function clone3D():Point3D		{			return new Point3D(this.x,this.y,this.z);		}			}}