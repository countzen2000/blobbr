package gs.util{	import gs.util.ObjectUtils;		import flash.utils.Dictionary;	import flash.utils.Proxy;	import flash.utils.flash_proxy;		/**	 * The OrderedDictionary class provides a dictionary like collection 	 * which persists the order of entries similar to an array.	 * 	 * <listing>		 * var od:OrderedDictionary=new OrderedDictionary();	 * od['test0']="foo";	 * od['test1']="bar";	 * od.push("test3","doe");	 * 	 * trace(od['test1']);	 * trace(od['test3']);	 * 	 * trace(od.pop());	 * 	 * var i:int=0;	 * var l:int=od.length;	 * for(i;i&lt;l;i++)	 * { 	 *     trace(od[i]);	 * }	 * </listing>	 * 	 * <script src="http://mint.codeendeavor.com/?js" type="text/javascript"></script>	 */	final public class OrderedDictionary extends Proxy	{				/**		 * @private		 * The dictionary that object to index's are stored in.		 */		protected var dict:Dictionary;				/**		 * @private		 * The array that objects are stored in.		 */		protected var arr:Array;		/**		 * Constructor for OrderedDictionary instances.		 * 		 * @param weakKeys Whether or not the dictionary's keys are weak references to objects.		 */		public function OrderedDictionary(weakKeys:Boolean=false)		{			dict=new Dictionary(weakKeys);			arr=new Array();		}				/**		 * @private		 * Set the internal data needed for a clone.		 */		public function setProviders(arr:Array,dict:Dictionary):void		{			arr=arr;			dict=dict;		}		/**		 * A non-negative integer specifying the number of elements in the ordered dictionary.		 */		public function get length():int		{			return arr.length;		}				/**		 * Adds one or more elements to the end of an ordered dictionary and returns the new length of the array.		 * 		 * @param name The key identifier.		 * @param value The value to store.		 */		public function push(name:*, value:*):int		{			var index:int=arr.push(value);			dict[name]=index - 1;						return arr.length;		}				/**		 * Removes the last element from an ordered dictionary and returns the value of that element.		 */		public function pop():*		{			var obj:* =arr.pop();			dict[obj]=null;			return obj;		}				/**		 * Removes the first element from an ordered dictionary and returns that element.		 */		public function shift():*		{			var obj:* =arr.shift();			for(var k:* in dict) dict[k]--;			dict[obj]=null;			return obj;		}				/**		 * Adds one or more elements to the beginning of an ordered dictionary and returns the new length of the array.		 * 		 * @param name The key name.		 * @param value The value to store.		 */		public function unshift(name:*,value:*):int		{			for(var k:* in dict) dict[k]++;			dict[name]=0;			arr.unshift(value);			return arr.length;		}				/**		 * Remove multiple items from the ordered dictionary.		 * 		 * @param startIndex The start index to delete from.		 * @param deleteCound The number of items to delete.		 */		public function splice(startIndex:int,deleteCount:int):OrderedDictionary		{			arr.splice(startIndex,deleteCount);			var dictMax:int=startIndex + deleteCount;			var dictIndex:int;			for(var name:* in dict) 			{				dictIndex=dict[name];				if(dictIndex >= startIndex && dictIndex < dictMax) delete dict[name];				if(dictIndex >= dictMax) dict[name] -= deleteCount;			}							return this;		}				/**		 * Remove objects by multiple keys.		 * 		 * @param ...keys The keys to delete.		 */		public function spliceByKeys(...keys):OrderedDictionary		{			var i:int=0;			var num:int=keys.length;			var name:String;			var dictIndex:int;			for(;i<num;i++)			{				name=keys[int(i)];				dictIndex=dict[name];				splice(dictIndex,1);			}			return this;		}				/**		 * Clone this OrderedDictionary.		 * 		 * @param weakKeys Whether or not the new dictionary will have weak references to it's objects.		 */		public function clone(weakKeys:Boolean=false):OrderedDictionary		{			var d:OrderedDictionary=new OrderedDictionary(weakKeys);			d.setProviders(arr.concat(),ObjectUtils.clone(dict));			return d;		}				/**		 * Dispose of this ordered dictionary.		 */		public function dispose():void		{			dict=null;			arr=null;		}				/**		 * @private		 */		flash_proxy override function getProperty(name:*):*		{			var index:int;			var pattern:RegExp=/^[0-9]*$/;			if(pattern.test(name) && name < arr.length)			{				return arr[name];			}			else if(dict[name] >= 0)			{				index=dict[name];				return arr[index];			}			return undefined;		}		/**		 * @private		 */		flash_proxy override function setProperty(name:*, value:*):void 		{			var index:int;			var pattern:RegExp=/^[0-9]*$/;			if(!pattern.test(name) && !dict[name])			{				index=arr.push(value);				dict[name]=index - 1;			}			else			{				dict[name]=arr[name]=value;			}		}	}}